{"ast":null,"code":"import _extends from \"@babel/runtime/helpers/esm/extends\";\nimport * as React from 'react';\nimport { unstable_useForkRef as useForkRef } from '@mui/utils';\nimport { SelectUnstyledContext } from '../SelectUnstyled/SelectUnstyledContext';\nimport useForcedRerendering from '../utils/useForcedRerendering';\n\n/**\n *\n * API:\n *\n * - [useOption API](https://mui.com/base/api/use-option/)\n */\nexport default function useOption(params) {\n  const {\n    value,\n    optionRef: optionRefParam\n  } = params;\n  const selectContext = React.useContext(SelectUnstyledContext);\n  if (!selectContext) {\n    throw new Error('Option must have access to the SelectUnstyledContext (i.e., be used inside a SelectUnstyled component).');\n  }\n  const {\n    getOptionProps,\n    getOptionState,\n    listboxRef,\n    registerHighlightChangeHandler,\n    registerSelectionChangeHandler\n  } = selectContext;\n  const optionState = getOptionState(value);\n  const {\n    selected,\n    highlighted\n  } = optionState;\n  const rerender = useForcedRerendering();\n  React.useEffect(() => {\n    function updateSelectedState(selectedValues) {\n      if (!selected) {\n        if (Array.isArray(selectedValues)) {\n          if (selectedValues.includes(value)) {\n            rerender();\n          }\n        } else if (selectedValues === value) {\n          rerender();\n        }\n      } else if (Array.isArray(selectedValues)) {\n        if (!selectedValues.includes(value)) {\n          rerender();\n        }\n      } else if (selectedValues !== value) {\n        rerender();\n      }\n    }\n    return registerSelectionChangeHandler(updateSelectedState);\n  }, [registerSelectionChangeHandler, rerender, selected, value]);\n  React.useEffect(() => {\n    function updateHighlightedState(highlightedValue) {\n      if (highlightedValue === value && !highlighted) {\n        rerender();\n      } else if (highlightedValue !== value && highlighted) {\n        rerender();\n      }\n    }\n    return registerHighlightChangeHandler(updateHighlightedState);\n  }, [registerHighlightChangeHandler, rerender, value, highlighted]);\n  const optionRef = React.useRef(null);\n  const handleRef = useForkRef(optionRefParam, optionRef);\n  React.useEffect(() => {\n    // Scroll to the currently highlighted option\n    if (highlighted) {\n      if (!listboxRef.current || !optionRef.current) {\n        return;\n      }\n      const listboxClientRect = listboxRef.current.getBoundingClientRect();\n      const optionClientRect = optionRef.current.getBoundingClientRect();\n      if (optionClientRect.top < listboxClientRect.top) {\n        listboxRef.current.scrollTop -= listboxClientRect.top - optionClientRect.top;\n      } else if (optionClientRect.bottom > listboxClientRect.bottom) {\n        listboxRef.current.scrollTop += optionClientRect.bottom - listboxClientRect.bottom;\n      }\n    }\n  }, [highlighted, listboxRef]);\n  return {\n    getRootProps: function () {\n      let otherHandlers = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};\n      return _extends({}, otherHandlers, getOptionProps(value, otherHandlers), {\n        ref: handleRef\n      });\n    },\n    highlighted,\n    index: optionState.index,\n    selected\n  };\n}","map":null,"metadata":{},"sourceType":"module","externalDependencies":[]}