{"ast":null,"code":"import { isWalletAdapterCompatibleWallet, StandardWalletAdapter } from '@solana/wallet-standard-wallet-adapter-base';\nimport { DEPRECATED_getWallets } from '@wallet-standard/app';\nimport { useEffect, useMemo, useRef, useState } from 'react';\nexport function useStandardWalletAdapters(adapters) {\n  const {\n    get,\n    on\n  } = useConstant(() => DEPRECATED_getWallets());\n  const [standardAdapters, setStandardAdapters] = useState(() => wrapWalletsWithAdapters(get()));\n  const warnings = useConstant(() => new Set());\n  useEffect(() => {\n    const listeners = [on('register', function () {\n      for (var _len = arguments.length, wallets = new Array(_len), _key = 0; _key < _len; _key++) {\n        wallets[_key] = arguments[_key];\n      }\n      return setStandardAdapters(standardAdapters => [...standardAdapters, ...wrapWalletsWithAdapters(wallets)]);\n    }), on('unregister', function () {\n      for (var _len2 = arguments.length, wallets = new Array(_len2), _key2 = 0; _key2 < _len2; _key2++) {\n        wallets[_key2] = arguments[_key2];\n      }\n      return setStandardAdapters(standardAdapters => standardAdapters.filter(standardAdapter => wallets.some(wallet => wallet === standardAdapter.wallet)));\n    })];\n    return () => listeners.forEach(destroy => destroy());\n  }, [on]);\n  return useMemo(() => [...standardAdapters, ...adapters.filter(_ref => {\n    let {\n      name\n    } = _ref;\n    if (standardAdapters.some(standardAdapter => standardAdapter.name === name)) {\n      if (!warnings.has(name)) {\n        warnings.add(name);\n        console.warn(`${name} was registered as a Standard Wallet. The Wallet Adapter for ${name} can be removed from your app.`);\n      }\n      return false;\n    }\n    return true;\n  })], [standardAdapters, adapters, warnings]);\n}\nfunction useConstant(fn) {\n  const ref = useRef();\n  if (!ref.current) {\n    ref.current = {\n      value: fn()\n    };\n  }\n  return ref.current.value;\n}\nfunction wrapWalletsWithAdapters(wallets) {\n  return wallets.filter(isWalletAdapterCompatibleWallet).map(wallet => new StandardWalletAdapter({\n    wallet\n  }));\n}\n//# sourceMappingURL=useStandardWalletAdapters.js.map","map":null,"metadata":{},"sourceType":"module","externalDependencies":[]}